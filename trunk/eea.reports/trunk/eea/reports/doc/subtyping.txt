Overview
========

The Report Product can be used to organise printed publications that are
available online for download. Reports usually have a publication date,
order and ISBN numbers, an author and exist in several language versions.
Once stored in the Reports Product, they can be displayed using
autogenerated overviews.

Adding Reports
~~~~~~~~~~~~~~

    >>> self.loginAsPortalOwner()

We will add reports with LinguaPlone support, so we need to setup some languages:

    >>> portal_languages = self.portal.portal_languages
    >>> portal_languages.addSupportedLanguage('en')
    >>> portal_languages.addSupportedLanguage('de')
    >>> portal_languages.getSupportedLanguages()
    ['en', 'de']

It depends on your portal settings whether a new object is language neutral or gets the
default language.

    >>> default_language = portal_languages.start_neutral and '' or portal_languages.getDefaultLanguage()

Reports are File objects. What makes them Reports are certain
additional metadata which characterise the File closer. By enhancing the
default File object, we stay updatable using the core Plone mechanisms and
do not introduce yet another content type.

    >>> _ = self.folder.invokeFactory('Report', 'myreport')
    >>> myreport = self.folder.myreport
    >>> myreport.Language()
    'en'

    >>> myreport.setLanguage(default_language)
    >>> myreport.Language() == default_language
    True
    >>> myreport.setTitle('My english File')
    >>> myreport.setDescription('My english File description')
    >>> myreport.Title()
    'My english File'
    >>> myreport.Language()
    'en'

Check report meta_type and subtype

    >>> myreport.meta_type
    'ATFolder'

    >>> from eea.reports.interfaces import IReportContainerEnhanced
    >>> IReportContainerEnhanced.providedBy(myreport)
    True

Now we load a demonstration pdf file from doc/test.pdf which has the following
metadata set within the pdf file:

    - Title:          Annual European Community LRTAP Convention emission inventory report 1990-2006
    - Subject:        The report presents an overview of air pollutant emission data reported by the EU-27 Member States between the years 1990 to 2006.
    - Author:         Peder Gabrielsen/Martin Adams
    - Creator:        Adobe InDesign CS2 (4.0.2)
    - Producer:       Adobe PDF Library 7.0
    - CreationDate:   Thu Jul 10 15:28:18 2008
    - ModDate:        Thu Jul 10 15:29:25 2008
    - Tagged:         yes
    - Pages:          82
    - Encrypted:      no
    - Page size:      595.276 x 841.89 pts (A4)
    - File size:      2365565 bytes
    - Optimized:      yes
    - PDF version:    1.4

    >>> docpdf = self.loadfile('tests/data/test.pdf', ctype='application/pdf')
    >>> from ZPublisher.HTTPRequest import FileUpload
    >>> isinstance(docpdf, FileUpload)
    True

Edit report like properties:

    >>> form = {
    ... 'file_delete': '',
    ... 'file_file': docpdf,
    ... 'serial_title_type': 'Briefing',
    ... 'serial_title_number': 20,
    ... 'serial_title_year': 1999,
    ... 'serial_title_alt': '',
    ... 'creators': ('EEA (European Environment Agency)', 'new creator'),
    ... 'publishers': ('EIONET', 'new publisher'),
    ... 'eeaid': 23456,
    ... 'isbn': 'WETROET-3543-GFSFGDF',
    ... 'pages': 34,
    ... 'trailer': 'Sample trailer',
    ... 'order_override_text': 'Sample order override text',
    ... 'order_extra_text': 'Sample order extra text',
    ... }
    >>> myreport.processForm(values=form)

Check file saved

    >>> report_file = myreport.getField('file').getAccessor(myreport)()
    >>> int(report_file.get_size())
    2365565

Serial title, creators and publishers

    >>> myreport.getField('serial_title').getAccessor(myreport)()
    ('Briefing', 20, 1999, '')
    >>> myreport.getField('creators').getAccessor(myreport)()
    ('EEA (European Environment Agency)', 'new creator')
    >>> myreport.getField('publishers').getAccessor(myreport)()
    ('EIONET', 'new publisher')

Test alternative serial title:

    >>> form = {
    ... 'serial_title_type': 'Briefing',
    ... 'serial_title_number': 20,
    ... 'serial_title_year': 1999,
    ... 'serial_title_alt': u'Save me, only !',
    ... }
    >>> myreport.processForm(values=form)
    >>> myreport.getField('serial_title').getAccessor(myreport)()
    ('Briefing', 20, 1999, 'Save me, only !')

Other properties

    >>> myreport.getField('eeaid').getAccessor(myreport)()
    23456
    >>> myreport.getField('isbn').getAccessor(myreport)()
    'WETROET-3543-GFSFGDF'

    >>> myreport.getField('pages').getAccessor(myreport)()
    34
    >>> myreport.getField('trailer').getAccessor(myreport)()
    '<p>Sample trailer</p>'
    >>> myreport.getField('order_override_text').getAccessor(myreport)()
    '<p>Sample order override text</p>'
    >>> myreport.getField('order_extra_text').getAccessor(myreport)()
    '<p>Sample order extra text</p>'
