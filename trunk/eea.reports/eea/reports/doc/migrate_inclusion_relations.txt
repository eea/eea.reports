Overview
========

Migrate old reports inclusion relations

Inclusion relations
===================

Imports and login

    >>> from eea.reports.migration.config import REPORTS_CONTAINER, ANNOTATION_HASPART, ANNOTATION_ISPARTOF
    >>> from eea.reports.migration.migrate_relations import MigrateRelations
    >>> from zope.app.annotation.interfaces import IAnnotations
    >>> from ZODB.PersistentList import PersistentList
    >>> self.loginAsPortalOwner()


Let's see what happends if you run this script before reports migration script

    >>> run = MigrateRelations(self.folder)
    >>> run()
    'You should run @@migrate_reports script first !!!'


Add publications container

    >>> folder_id = self.folder.invokeFactory('Folder', REPORTS_CONTAINER)
    >>> container = getattr(self.folder, folder_id)


Add some reports

    >>> _ = container.invokeFactory('Report', 'a')
    >>> _ = container.invokeFactory('Report', 'b')
    >>> _ = container.invokeFactory('Report', 'c')
    >>> a = container.a
    >>> b = container.b
    >>> c = container.c


Now let's make some virtual relations as migration script does
  - a is part of b
  - b is part of c
  - c has parts b, a
  - f

    >>> rel = [b.getId()]
    >>> IAnnotations(a)[ANNOTATION_ISPARTOF] = PersistentList(rel)
    >>> rel = [c.getId()]
    >>> IAnnotations(b)[ANNOTATION_ISPARTOF] = PersistentList(rel)
    >>> rel = [a.getId(), b.getId()]
    >>> IAnnotations(c)[ANNOTATION_HASPART] = PersistentList(rel)


Now let's run the migration script.

    >>> run = MigrateRelations(self.folder)
    >>> run()
    'Publications relations updated !'


First let's see if annotations were cleaned up

    >>> IAnnotations(a).get(ANNOTATION_ISPARTOF, 'Ops')
    'Ops'
    >>> IAnnotations(b).get(ANNOTATION_ISPARTOF, 'Argh')
    'Argh'
    >>> IAnnotations(c).get(ANNOTATION_HASPART, 'Nope !')
    'Nope !'


Now let's see our relations

    >>> from Products.EEAContentTypes.interfaces import IRelations
    >>> res = IRelations(a).forwardReferences()
    >>> rel = [x.getId() for x in res]
    >>> rel.sort()
    >>> rel
    ['b', 'c']
    >>> IRelations(a).backReferences()
    []
    >>> res = IRelations(b).forwardReferences()
    >>> [x.getId() for x in res]
    ['c']
    >>> res = IRelations(b).backReferences()
    >>> [x.getId() for x in res]
    ['a']
    >>> res = IRelations(c).backReferences()
    >>> [x.getId() for x in res]
    ['b', 'a']
    >>> IRelations(c).forwardReferences()
    []
