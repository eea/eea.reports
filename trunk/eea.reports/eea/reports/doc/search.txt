Reports catalog search
======================

This package defines a fake portal_type called Report. Adding an object with this
type it actually add a Folder and subtypes it as Report (marks it with
IReportContainerEnhanced interface). This way when you search for reports
you'll get no results. Thus a catalog adapter was added to handle this situation.
Let's see if it really does it.

Let's setup the sandbox

    >>> self.loginAsPortalOwner()
    >>> _ = portal.invokeFactory('Folder', 'sandbox')
    >>> sandbox = portal._getOb('sandbox')

Now let's add some folders

    >>> for x in range(2):
    ...     _ = sandbox.invokeFactory('Folder',
    ...             id='folder-%d' % x,
    ...             title='Folder %d' % x,
    ...             description='Folder description %d' % x)
    >>> [x.getId() for x in sandbox.objectValues() if x.portal_type == 'Folder']
    ['folder-0', 'folder-1']

Now let's add some documents

    >>> for x in range(2):
    ...     _ = sandbox.invokeFactory('Document',
    ...             id='document-%d' % x,
    ...             title='Document %d' %x,
    ...             description='Document description %d' % x)
    >>> [x.getId() for x in sandbox.objectValues() if x.portal_type == 'Document']
    ['document-0', 'document-1']

And of course some reports

    >>> for x in range(2):
    ...     _ = sandbox.invokeFactory('Report',
    ...             id='report-%d' % x,
    ...             title='Report %d' %x,
    ...             description='Report description %d' % x)

Let's see our reports

    >>> [x.getId() for x in sandbox.objectValues() if x.portal_type == 'Report']
    []

Well no report, what about folders

    >>> [x.getId() for x in sandbox.objectValues() if x.portal_type == 'Folder']
    ['folder-0', 'folder-1', 'report-0', 'report-1']

What if we search for them using portal_catalog

    >>> from Products.CMFCore.utils import getToolByName
    >>> ctool = getToolByName(sandbox, 'portal_catalog')
    >>> cur_path = '/'.join(sandbox.getPhysicalPath())
    >>> path = {'query': cur_path, 'depth': 1}
    >>> brains = ctool(portal_type='Report', sort_on='sortable_title', path=path)
    >>> [brain.getId for brain in brains]
    []

Ok, no report here, let's search for folders

    >>> brains = ctool(portal_type='Folder', sort_on='sortable_title', path=path)
    >>> [brain.getId for brain in brains]
    ['folder-0', 'folder-1', 'report-0', 'report-1']

We can search using object_provides index

    >>> brains = ctool(sort_on='sortable_title', path=path,
    ...   object_provides='eea.reports.interfaces.IReportContainerEnhanced')
    >>> [brain.getId for brain in brains]
    ['report-0', 'report-1']

Searching for interfaces is good for developers but not for end users so,
searching with catalog will not return what we need, let's try to use our
adapter

    >>> from eea.reports.search.interfaces import IReportCatalog
    >>> ctool = IReportCatalog(ctool)
    >>> brains = ctool(portal_type='Report', sort_on='sortable_title', path=path)
    >>> [brain.getId for brain in brains]
    ['report-0', 'report-1']

We don't want reports when searching for folders

    >>> brains = ctool(portal_type='Folder', sort_on='sortable_title', path=path)
    >>> [brain.getId for brain in brains]
    ['folder-0', 'folder-1']

Now let's make more complex searches

    >>> query = {
    ...    'portal_type': ['Document', 'Report'],
    ...    'Title': '0',
    ...    'sort_on': 'sortable_title',
    ...    'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['document-0', 'report-0']

As reports are folders, let's see if it doesn't return duplicates when searching
for both portal types

    >>> query = {
    ...   'portal_type': ['Folder', 'Report'],
    ...   'sort_on': 'sortable_title',
    ...   'sort_order': 'reverse',
    ...   'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['report-1', 'report-0', 'folder-1', 'folder-0']

As our adapter modifies query object_provides let's see what it returns when
object_provides is present in query

    >>> query = {
    ...   'portal_type': ('Document', 'Report'),
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ...   'object_provides': 'Products.ATContentTypes.interface.document.IATDocument',
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['document-0', 'document-1']

    >>> query = {
    ...   'portal_type': 'Report',
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ...   'object_provides': [
    ...     'Products.ATContentTypes.interface.document.IATDocument',
    ...     'Products.ATContentTypes.interface.file.IATFile',
    ...    ],
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    []

    >>> query = {
    ...   'portal_type': 'Report',
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ...   'object_provides': [
    ...     'eea.reports.interfaces.IReportContainerEnhanced',
    ...     'Products.ATContentTypes.interface.file.IATDocument',
    ...    ],
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['report-0', 'report-1']

    >>> query = {
    ...   'portal_type': 'Folder',
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ...   'object_provides': [
    ...     'Products.ATContentTypes.interface.folder.IATFolder',
    ...    ],
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['folder-0', 'folder-1']

Searching for Folder and IReportContainerEnhanced should return also our reports

    >>> query = {
    ...   'portal_type': 'Folder',
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ...   'object_provides': [
    ...     'eea.reports.interfaces.IReportContainerEnhanced',
    ...    ],
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['report-0', 'report-1']

What about complex indexes

    >>> query = {
    ...   'portal_type': {'query': 'Report', 'operator': 'and'},
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['report-0', 'report-1']

    >>> query = {
    ...   'portal_type': {'query': ['Report', 'Folder'], 'operator': 'and'},
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    []

    >>> query = {
    ...   'portal_type': {'query': ['Report', 'Folder'], 'operator': 'or'},
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['folder-0', 'folder-1', 'report-0', 'report-1']

    >>> query = {
    ...   'portal_type': {'query': ['Report', 'Document'], 'operator': 'or'},
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['document-0', 'document-1', 'report-0', 'report-1']

    >>> query = {
    ...   'portal_type': {'query': ['Report', 'Document'], 'operator': 'or'},
    ...   'Title': '1',
    ...   'sort_on': 'sortable_title',
    ...   'path': path,
    ... }
    >>> brains = ctool(**query)
    >>> [brain.getId for brain in brains]
    ['document-1', 'report-1']
